col = "tomato3",
lwd = 3)
#add standard deviation line below the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(prcp_site1$x,na.rm=TRUE) - sd(prcp_site1$x,na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#add standard deviation line above the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(prcp_site1$x,na.rm=TRUE) + sd(prcp_site1$x,na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
x.plot <- seq(1000,3000, length.out = 500)
#the dnorm function will produce the probability density based on a mean and standard deviation.
y.plot <-  dnorm(seq(1000,3000, length.out = 500),
mean(prcp_site1$x,na.rm=TRUE),
sd(prcp_site1$x,na.rm=TRUE))
#create a density that is scaled to fit in the plot since the density has a different range from the data density.
#!!! this is helpful for putting multiple things on the same plot
#!!! It might seem confusing at first. It means the maximum value of the plot is always the same between the two
# datasets on the plot. Here both plots share zero as a minimum.
y.scaled <- (max(h11$density)/max(y.plot)) * y.plot
#points function adds points or lines to a graph
#the first two arguments are the x coordinates and the y coordinates.
points(x.plot,
y.scaled,
type = "l",
col = "royalblue3",
lwd = 4,
lty = 2)
## Question 9
meanprcp_site1<- mean(prcp_site1$x)
# Mean annual precipitation for Aberdeen
meanprcp_site2<- mean(prcp_site2$x)
# Mean annual precipitation for Livermore
meanprcp_site3<- mean(prcp_site3$x)
# Mean annual precipitation for Mandan Experiment Station
meanprcp_site4<- mean(prcp_site4$x)
# Mean annual precipitation for Mormon Flat
meanprcp_site5<- mean(prcp_site5$x)
# Mean annual precipitation for Morrisville 6 SW
mean_annual_prcp<- data.frame()
mean_annual_prcp<- cbind("Number"= 1:5, "Name"= levels(datW$NAME),
"Annual precipitation mean"= c(meanprcp_site1, meanprcp_site2, meanprcp_site3,
meanprcp_site4, meanprcp_site5))
mean_annual_prcp<- as.data.frame(mean_annual_prcp)
mean_annual_prcp$`Annual precipitation mean`<- as.numeric(as.character
(mean_annual_prcp$`Annual precipitation mean`))
## Checking rows and columns of data frame datW at the end of the Activity 2 and our analysis ##
nrow(datW)
ncol(datW)
# The dataset still contains 157849 rows but now has 13 columns
################End of Activity 2#####################
h11<- hist(prcp_site1$x, # Use data on total precipitation for each year for Aberdeen, WA US
freq=FALSE,
main = paste(levels(datW$NAME)[1]),
xlab = "Annual precipitation (in mm)",
ylab="Relative frequency",
col="grey50",
border="white") # roughly normally distributed
#add mean line with red (tomato3) color
#and thickness of 3
abline(v = mean(prcp_site1$x,na.rm=TRUE),
col = "tomato3",
lwd = 3)
#add standard deviation line below the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(prcp_site1$x,na.rm=TRUE) - sd(prcp_site1$x,na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#add standard deviation line above the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(prcp_site1$x,na.rm=TRUE) + sd(prcp_site1$x,na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
x.plot <- seq(1000,3000, length.out = 500)
#the dnorm function will produce the probability density based on a mean and standard deviation.
y.plot <-  dnorm(seq(1000,3000, length.out = 500),
mean(prcp_site1$x,na.rm=TRUE),
sd(prcp_site1$x,na.rm=TRUE))
#create a density that is scaled to fit in the plot since the density has a different range from the data density.
#!!! this is helpful for putting multiple things on the same plot
#!!! It might seem confusing at first. It means the maximum value of the plot is always the same between the two
# datasets on the plot. Here both plots share zero as a minimum.
y.scaled <- (max(h11$density)/max(y.plot)) * y.plot
#points function adds points or lines to a graph
#the first two arguments are the x coordinates and the y coordinates.
points(x.plot,
y.scaled,
type = "l",
col = "royalblue3",
lwd = 4,
lty = 2)
mean(prcp_site1$x,na.rm=TRUE)
sd(prcp_site1$x,na.rm=TRUE)
######Activity 2#######
## Question 1
datW <- read.csv("y:\\Students\\slalwani\\a02\\2011124.csv")
nrow(datW)
ncol(datW) # Initially, there are 157849 rows and 9 columns
## Add dateF column containing the proper date format and a date column that includes only years as numeric data
## to our dataset datW
#specify a column with a proper date format
#note the format here dataframe$column
datW$dateF <- as.Date(datW$DATE, "%Y-%m-%d")
#google date formatting in r to find more options and learn more
#create a date column by reformatting the date to only include years
#and indicating that it should be treated as numeric data
datW$year <- as.numeric(format(datW$dateF,"%Y"))
## Question 2
#Below I create an example vector of the following data types:
#character, numeric, integer, factor
#?class: Determines what "type" an object is from the point of view of object-oriented programming.
#        In other words, a property of an object that determines how generic objects operate with it
char_ex<- c("Marry", "has", "2", "little", "lambs")
class(char_ex) #char_ex is an example vector of character data type
num_ex<- c(1,2,3.4, 4.32, 0)
class(num_ex) #num_ex is an example of numeric data type
int_ex<- c(1L,2L,-3L,-4L,6L)
class(int_ex) #int_ex is an example of integer data type
subs<- c("Math", "English", "Greek", "History", "Geography")
fact_ex<- factor(subs)
class(fact_ex)#fact_ex is an example of factor data type
##Data explorationm cleaning and visualization##
# In this section, we add two more columns to the dataset datW while exploring descriptive statistics
# and histograms in R
#find out all unique site names
levels(datW$NAME)
#look at the mean maximum temperature for Aberdeen
mean(datW$TMAX[datW$NAME == "ABERDEEN, WA US"]) #gives NA because there is missing data in dataset
mean(datW$TMAX[datW$NAME == "ABERDEEN, WA US"], na.rm = T)
#calculate the average daily temperature
#This temperature will be halfway between the minimum and maximum temperature
datW$TAVE <- datW$TMIN + ((datW$TMAX-datW$TMIN)/2)
#get the mean across all sites
#the by function is a list of one or more variables to index over.
#FUN indicates the function we want to use
#if you want to specify any function specific arguments use a comma and add them after the function
#here we want to use the na.rm arguments specific to
averageTemp <- aggregate(datW$TAVE, by=list(datW$NAME), FUN="mean",na.rm=TRUE)
averageTemp
#change the automatic output of column names to be more meaningful
#note that MAAT is a common abbreviation for Mean Annual Air Temperature
colnames(averageTemp) <- c("NAME","MAAT")
averageTemp
#convert level to number for factor data type
#you will have to reference the level output or look at the row of data to see the character designation.
datW$siteN <- as.numeric(datW$NAME)
## Question 4 (Question 3 after Question 4)
# use par as a tool to combine multiple plots into one overall graph
# In our case, creates a 2x2 matrix that combines our four histograms in 1 window
# IMP: par(mfrow()) fills plots into the matrix by row
par(mfrow= c(2,2))
#Below, we create histograms for daily temperatures for four sites
## Site 1: Aberdeen, WA US
#make a histogram for the first site in our levels, Aberdeen
#main= is the title name argument.
#Here you want to paste the actual name of the factor not the numeric index
#since that will be more meaningful.
h1<-hist(datW$TAVE[datW$siteN == 1],
freq=FALSE,
main = paste(levels(datW$NAME)[1]),
xlab = "Average daily temperature (degrees C)", # X axis title
ylab="Relative frequency", # Y axis title
col="grey50", # assign color for histogram bars
border="white")
#add mean line with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
col = "tomato3",
lwd = 3)
#add standard deviation line below the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE) - sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
col = "tomato3",
lty = 3, #dotted line type
lwd = 3)
#add standard deviation line above the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE) + sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
## Site 2: Livermore, CA US
#make a histogram for the second site in our levels, Livermore
#main= is the title name argument.
#Here you want to paste the actual name of the factor not the numeric index
#since that will be more meaningful.
h2<-hist(datW$TAVE[datW$siteN == 2],
freq=FALSE,
main = paste(levels(datW$NAME)[2]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="deepskyblue1",
border="white")
#add mean line with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 2],na.rm=TRUE),
col = "tomato3",
lwd = 3)
#add standard deviation line below the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 2],na.rm=TRUE) - sd(datW$TAVE[datW$siteN == 2],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#add standard deviation line above the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 2],na.rm=TRUE) + sd(datW$TAVE[datW$siteN == 2],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
## Site 3: Mandan Experiment Station, ND US
#make a histogram for the third site in our levels, Mandan Experiment Station
#main= is the title name argument.
#Here you want to paste the actual name of the factor not the numeric index
#since that will be more meaningful.
h3<-hist(datW$TAVE[datW$siteN == 3],
freq=FALSE,
main = paste(levels(datW$NAME)[3]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="royalblue1",
border="white")
#add mean line with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 3],na.rm=TRUE),
col = "tomato3",
lwd = 3)
#add standard deviation line below the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 3],na.rm=TRUE) - sd(datW$TAVE[datW$siteN == 2],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#add standard deviation line above the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 3],na.rm=TRUE) + sd(datW$TAVE[datW$siteN == 2],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
## Site 4: Mormon Flat, AZ US
#make a histogram for the second site in our levels, Mormon Flat
#main= is the title name argument.
#Here you want to paste the actual name of the factor not the numeric index
#since that will be more meaningful.
h4<-hist(datW$TAVE[datW$siteN == 4],
freq=FALSE,
main = paste(levels(datW$NAME)[4]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="lightgray",
border="white")
#add mean line with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 4],na.rm=TRUE),
col = "tomato3",
lwd = 3)
#add standard deviation line below the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 4],na.rm=TRUE) - sd(datW$TAVE[datW$siteN == 2],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#add standard deviation line above the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(datW$TAVE[datW$siteN == 4],na.rm=TRUE) + sd(datW$TAVE[datW$siteN == 2],na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
## Question 3
help("hist")
help("paste")
## Question 5
# the seq function generates a sequence of numbers that we can use to plot the normal across the range of temperature
# values
dev.off() # used to reset the window from the 2*2 matrix created by par(mfrow())
par(mfrow=c(2,2))
# Creating histograms from question 4 with blue dashed line for normal distribution overlayed
# Note that the normal distribution is estimated separately for each site using the mean and
# standard deviation of data for each site
## Site 1: Aberdeen, WA US
h1<-hist(datW$TAVE[datW$siteN == 1],
freq=FALSE,
main = paste(levels(datW$NAME)[1]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="grey50",
border="white")
x.plot <- seq(-10,30, length.out = 100)
#the dnorm function will produce the probability density based on a mean and standard deviation.
y.plot <-  dnorm(seq(-10,30, length.out = 100),
mean(datW$TAVE[datW$siteN == 1],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 1],na.rm=TRUE))
#create a density that is scaled to fit in the plot since the density has a different range from the data density.
#!!! this is helpful for putting multiple things on the same plot
#!!! It might seem confusing at first. It means the maximum value of the plot is always the same between the two
# datasets on the plot. Here both plots share zero as a minimum.
y.scaled <- (max(h1$density)/max(y.plot)) * y.plot
#points function adds points or lines to a graph
#the first two arguments are the x coordinates and the y coordinates.
points(x.plot,
y.scaled,
type = "l",
col = "royalblue3",
lwd = 4,
lty = 2)
## Site 2: Livermore, CA US
h2<-hist(datW$TAVE[datW$siteN == 2],
freq=FALSE,
main = paste(levels(datW$NAME)[2]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="grey50",
border="white")
x.plot <- seq(-10,40, length.out = 100)
#the dnorm function will produce the probability density based on a mean and standard deviation.
y.plot <-  dnorm(seq(-10,40, length.out = 100),
mean(datW$TAVE[datW$siteN == 2],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 2],na.rm=TRUE))
#create a density that is scaled to fit in the plot since the density has a different range from the data density.
#!!! this is helpful for putting multiple things on the same plot
#!!! It might seem confusing at first. It means the maximum value of the plot is always the same between the two
# datasets on the plot. Here both plots share zero as a minimum.
y.scaled <- (max(h2$density)/max(y.plot)) * y.plot
#points function adds points or lines to a graph
#the first two arguments are the x coordinates and the y coordinates.
points(x.plot,
y.scaled,
type = "l",
col = "royalblue3",
lwd = 4,
lty = 2)
## Site 3: Mandan Experiment Station, ND US
h3<-hist(datW$TAVE[datW$siteN == 3],
freq=FALSE,
main = paste(levels(datW$NAME)[3]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="grey50",
border="white")
x.plot <- seq(-40,40, length.out = 100)
#the dnorm function will produce the probability density based on a mean and standard deviation.
y.plot <-  dnorm(seq(-40,40, length.out = 100),
mean(datW$TAVE[datW$siteN == 3],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 3],na.rm=TRUE))
#create a density that is scaled to fit in the plot since the density has a different range from the data density.
#!!! this is helpful for putting multiple things on the same plot
#!!! It might seem confusing at first. It means the maximum value of the plot is always the same between the two
# datasets on the plot. Here both plots share zero as a minimum.
y.scaled <- (max(h3$density)/max(y.plot)) * y.plot
#points function adds points or lines to a graph
#the first two arguments are the x coordinates and the y coordinates.
points(x.plot,
y.scaled,
type = "l",
col = "royalblue3",
lwd = 4,
lty = 2)
## Site 4: Mormon Flat, AZ US
h4<-hist(datW$TAVE[datW$siteN == 4],
freq=FALSE,
main = paste(levels(datW$NAME)[4]),
xlab = "Average daily temperature (degrees C)",
ylab="Relative frequency",
col="grey50",
border="white")
x.plot <- seq(-40,40, length.out = 100)
#the dnorm function will produce the probability density based on a mean and standard deviation.
y.plot <-  dnorm(seq(-40,40, length.out = 100),
mean(datW$TAVE[datW$siteN == 4],na.rm=TRUE),
sd(datW$TAVE[datW$siteN == 4],na.rm=TRUE))
#create a density that is scaled to fit in the plot since the density has a different range from the data density.
#!!! this is helpful for putting multiple things on the same plot
#!!! It might seem confusing at first. It means the maximum value of the plot is always the same between the two
# datasets on the plot. Here both plots share zero as a minimum.
y.scaled <- (max(h4$density)/max(y.plot)) * y.plot
#points function adds points or lines to a graph
#the first two arguments are the x coordinates and the y coordinates.
points(x.plot,
y.scaled,
type = "l",
col = "royalblue3",
lwd = 4,
lty = 2)
## Question 6
extreme<- qnorm(0.95, mean(datW$TAVE[datW$siteN==1], na.rm=T), sd(datW$TAVE[datW$siteN==1], na.rm=T))
# Calculates the threshold for extreme high temperatures
1-pnorm(extreme, mean(datW$TAVE[datW$siteN==1], na.rm=T)+4, sd(datW$TAVE[datW$siteN==1], na.rm=T))
# pnorm of 18.51026 (extreme) gives me all probability (area of the curve) above extreme temp. threshold
# Subtracting from 1 gives area above the extreme temp. threshold, and hence the probability that temperatures
# greater than the threshold for extreme high temperatures are observed
# Ans. We will expect to observe temperatures greater than the current threshold for extreme high temperatures
# (18.51026) 20.31%
## Question 7
# Here, I make a histogram of daily precipitation for Aberdeen
dev.off()
plot.new()
hist(datW$PRCP[datW$siteN == 1],
freq=FALSE,
main = paste(levels(datW$NAME)[1]),
xlab = "Daily Precipitation (mm)",
ylab="Relative frequency",
col="grey50",
border="white")
## Note on histogram above: The distribution of data on daily precipitation for Aberdeen is extremely right skewed
##                          and may actually be potentially described by the exponential distribution
##                          The right skew makes sense since Aberdeen doesn't receive rain on many days, hence
##                          high relative frequency for 0
## Question 8
# Using aggregate function (with FUN= "sum" as an attribute) to get precipitation for each year and site in the data
# Total precipitation for each year across all 5 sites
prcp_year<- aggregate(datW$PRCP, by=list(as.factor(datW$year)), FUN="sum", na.rm=T)
# Total precipitation for each site across all years
prcp_site<- aggregate(datW$PRCP, by=list(datW$NAME), FUN="sum", na.rm=T)
# Total precipitation for each year for Aberdeen, WA US
prcp_site1<- aggregate(datW$PRCP[datW$siteN==1], by=list(subset(datW, datW$siteN==1)$year),
FUN="sum", na.rm=T)
# Total precipitation for each year for Livermore, CA US
prcp_site2<- aggregate(datW$PRCP[datW$siteN==2], by=list(subset(datW, datW$siteN==2)$year),
FUN="sum", na.rm=T)
# Total precipitation for each year for Mandan Experiment Station, ND US
prcp_site3<- aggregate(datW$PRCP[datW$siteN==3], by=list(subset(datW, datW$siteN==3)$year),
FUN="sum", na.rm=T)
# Total precipitation for each year for Mormon Flat, AZ US
prcp_site4<- aggregate(datW$PRCP[datW$siteN==4], by=list(subset(datW, datW$siteN==4)$year),
FUN="sum", na.rm=T)
# Total precipitation for each year for Morrisville 6 SW, NY US
prcp_site5<- aggregate(datW$PRCP[datW$siteN==5], by=list(subset(datW, datW$siteN==5)$year),
FUN="sum", na.rm=T)
#Histogram of annual precipitation for ABERDEEN, WA US
# also add lines at mean, 1 standard deviation and -1 standard deviation away from mean to understand
# distribution of data
# Also overlayed a normal distribution curve to assess how well normal distribution models the data
h11<-hist(prcp_site1$x, # Use data on total precipitation for each year for Aberdeen, WA US
freq=FALSE,
main = paste(levels(datW$NAME)[1]),
xlab = "Annual precipitation (in mm)",
ylab="Relative frequency",
col="grey50",
border="white") # roughly normally distributed
#add mean line with red (tomato3) color
#and thickness of 3
abline(v = mean(prcp_site1$x,na.rm=TRUE),
col = "tomato3",
lwd = 3)
#add standard deviation line below the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(prcp_site1$x,na.rm=TRUE) - sd(prcp_site1$x,na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
#add standard deviation line above the mean with red (tomato3) color
#and thickness of 3
abline(v = mean(prcp_site1$x,na.rm=TRUE) + sd(prcp_site1$x,na.rm=TRUE),
col = "tomato3",
lty = 3,
lwd = 3)
x.plot <- seq(1000,3000, length.out = 500)
#the dnorm function will produce the probability density based on a mean and standard deviation.
y.plot <-  dnorm(seq(1000,3000, length.out = 500),
mean(prcp_site1$x,na.rm=TRUE),
sd(prcp_site1$x,na.rm=TRUE))
#create a density that is scaled to fit in the plot since the density has a different range from the data density.
#!!! this is helpful for putting multiple things on the same plot
#!!! It might seem confusing at first. It means the maximum value of the plot is always the same between the two
# datasets on the plot. Here both plots share zero as a minimum.
y.scaled <- (max(h11$density)/max(y.plot)) * y.plot
#points function adds points or lines to a graph
#the first two arguments are the x coordinates and the y coordinates.
points(x.plot,
y.scaled,
type = "l",
col = "royalblue3",
lwd = 4,
lty = 2)
## Question 9
meanprcp_site1<- mean(prcp_site1$x)
# Mean annual precipitation for Aberdeen
meanprcp_site2<- mean(prcp_site2$x)
# Mean annual precipitation for Livermore
meanprcp_site3<- mean(prcp_site3$x)
# Mean annual precipitation for Mandan Experiment Station
meanprcp_site4<- mean(prcp_site4$x)
# Mean annual precipitation for Mormon Flat
meanprcp_site5<- mean(prcp_site5$x)
# Mean annual precipitation for Morrisville 6 SW
mean_annual_prcp<- data.frame()
mean_annual_prcp<- cbind("Number"= 1:5, "Name"= levels(datW$NAME),
"Annual precipitation mean"= c(meanprcp_site1, meanprcp_site2, meanprcp_site3,
meanprcp_site4, meanprcp_site5))
mean_annual_prcp<- as.data.frame(mean_annual_prcp)
mean_annual_prcp$`Annual precipitation mean`<- as.numeric(as.character
(mean_annual_prcp$`Annual precipitation mean`))
## Checking rows and columns of data frame datW at the end of the Activity 2 and our analysis ##
nrow(datW)
ncol(datW)
# The dataset still contains 157849 rows but now has 13 columns
################End of Activity 2#####################
mean_annual_prcp<- data.frame()
mean_annual_prcp<- cbind("Number"= 1:5, "Name"= levels(datW$NAME),
"Annual precipitation mean"= c(meanprcp_site1, meanprcp_site2, meanprcp_site3,
meanprcp_site4, meanprcp_site5))
mean_annual_prcp<- as.data.frame(mean_annual_prcp)
mean_annual_prcp$`Annual precipitation mean`<- as.numeric(as.character
(mean_annual_prcp$`Annual precipitation mean`))
View(mean_annual_prcp)
mean_annual_prcp
