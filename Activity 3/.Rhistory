install.packages("lubridate")
#create a function. The names of the arguements for your function will be in parentheses. Everything in curly brackets will be run each time the function is run.
assert <- function(statement,err.message){
#if evaluates if a statement is true or false for a single item
if(statement == FALSE){
print(err.message)
}
}
### Practice###
#create a function. The names of the arguements for your function will be in parentheses. Everything in curly brackets will be run each time the function is run.
assert <- function(statement,err.message){
#if evaluates if a statement is true or false for a single item
if(statement == FALSE){
print(err.message)
}
}
#check how the statement works
#evaluate a false statement
assert(1 == 2, "error: unequal values")
#read in the data file
#skip the first 3 rows since there is additional column info
#specify the the NA is designated differently
datW <- read.csv("y:\\Students\\hkropp\\a03\\bewkes_weather.csv",
na.strings=c("#N/A"), skip=3, header=FALSE)
#preview data
print(datW[1,])
#get sensor info from file
# this data table will contain all relevent units
sensorInfo <-   read.csv("y:\\Students\\hkropp\\a03\\bewkes_weather.csv",
na.strings=c("#N/A"), nrows=2)
print(sensorInfo)
#get column names from sensorInfo table
# and set weather station colnames  to be the same
colnames(datW) <-   colnames(sensorInfo)
#preview data
print(datW[1,])
#use install.packages to install lubridate
# install.packages(c("lubridate"))
#it is helpful to comment this line after you run this line of code on the computer
#and the package installs. You really don't want to do this over and over again.
library(lubridate)
#convert to standardized format
#date format is m/d/y
dates <- mdy_hm(datW$timestamp, tz= "America/New_York")
#calculate day of year
datW$doy <- yday(dates)
#calculate hour in the day
datW$hour <- hour(dates) + (minute(dates)/60)
#calculate decimal day of year
datW$DD <- datW$doy + (datW$hour/24)
#quick preview of new date calcualtions
#datW[1,]
#see how many values have missing data for each sensor observation
#air temperature
length(which(is.na(datW$air.temperature)))
#wind speed
length(which(is.na(datW$wind.speed)))
#precipitation
length(which(is.na(datW$precipitation)))
#soil temperature
length(which(is.na(datW$soil.moisture)))
#soil moisture
length(which(is.na(datW$soil.temp)))
#make a plot with filled in points (using pch)
#line lines
plot(datW$DD, datW$soil.moisture, pch=19, type="b", xlab = "Day of Year",
ylab="Soil moisture (cm3 water per cm3 soil)")
#make a plot with filled in points (using pch)
#line lines
plot(datW$DD, datW$air.temperature, pch=19, type="b", xlab = "Day of Year",
ylab="Air temperature (degrees C)")
#I'm going to make a new column to work with that indicates that I am conducting QAQC
#because overwriting values should be done cautiously and can lead to confusing issues.
#It can be particularily confusing when you are just learning R.
#Here I'm using the ifelse function
#the first argument is a logical statement to be evaluated as true or false on a vector
#the second argument is the value that my air.tempQ1 column will be given if the statement
#is true. The last value is the value that will be given to air.tempQ1 if the statement is false.
#In this case it is just given the air temperature value
datW$air.tempQ1 <- ifelse(datW$air.temperature < 0, NA, datW$air.temperature)
#check the values at the extreme range of the data
#and throughout the percentiles
quantile(datW$air.tempQ1)
#look at days with really low air temperature
datW[datW$air.tempQ1 < 8,]
#look at days with really high air temperature
datW[datW$air.tempQ1 > 33,]
### Question 4 ###
fahrenheit_vals<- c(95, 82.5, 69, 94, 44, 54)
celcius_vals<- (5*(fahrenheit_vals-32))/9 # Convert temperatures in fahrenheit to celcius
### Question 5 ###
#plot precipitation and lightning strikes on the same plot
#normalize lighting strikes to match precipitation
lightscale <- (max(datW$precipitation)/max(datW$lightning.acvitivy)) * datW$lightning.acvitivy
#make the plot with precipitation and lightning activity marked
#make it empty to start and add in features
plot(datW$DD , datW$precipitation, xlab = "Day of Year", ylab = "Precipitation & lightning",
type="n")
#plot precipitation points only when there is precipitation
#make the points semi-transparent
points(datW$DD[datW$precipitation > 0], datW$precipitation[datW$precipitation > 0],
col= rgb(95/255,158/255,160/255,.5), pch=15)
#plot lightning points only when there is lightning
points(datW$DD[lightscale > 0], lightscale[lightscale > 0],
col= "tomato3", pch=19)
## Check that lengths of datW$DD and light scale vectors are equal
length(datW$DD)==length(lightscale)  # Returns True
## Using assert function from Part 1 to provide evidence on why we can use lightscale to
## subset datW, even though lightscale vector is not in the datW dataframe
# Below, the assert statement doesn't return an error
#This is evidence that we can use lightscale vector to subset datW dataframe even though
# lightscale vector is not part of the dataframe datW
assert(all(datW$DD[datW$lightning.acvitivy>0]==datW$DD[lightscale > 0]) &&
length(datW$DD[datW$lightning.acvitivy>0])==length(datW$DD[lightscale > 0]),
"error in subsetting datW using lightscale vector")
#filter out storms in wind and air temperature measurements
# filter all values with lightning that coincides with rainfall greater than 2mm or only rainfall over 5 mm.
#create a new air temp column
datW$air.tempQ2 <- ifelse(datW$precipitation  >= 2 & datW$lightning.acvitivy >0, NA,
ifelse(datW$precipitation > 5, NA, datW$air.tempQ1))
## Question 6 ##
datW$wind.speedQ2 <- ifelse(datW$precipitation  >= 2 & datW$lightning.acvitivy >0, NA,
ifelse(datW$precipitation > 5, NA, datW$wind.speed))
filter_correct<- datW$wind.speed[!(datW$precipitation  >= 2 & datW$lightning.acvitivy) && datW$precipitation <= 5]
# gives no error
# A brief note on assert condition: it checks if the data is filtered as expected
# To do so, we use filter_correct vectors which subsets datW$wind.speed according to the filtering requirements
# A special consideration made in checking for equality of vectors here is also accounting for NA values
# Fianlly, it is important to check that length of vectors is equal besides the values in them
assert(all(filter_correct == datW$wind.speedQ2 || (is.na(filter_correct) && is.na(datW$wind.speedQ2)))
&& length(filter_correct)==length(datW$wind.speedQ2),
"error in filtering the data as expected")
# Plot of windspeed with the new data
plot(datW$DD, datW$wind.speedQ2, pch=19, type= "b", xlab= "Day of Year", ylab = "Wind speed (measured in m.s)")
## Question 7, 9
# arranges all 4 plots into a 2x2 matrix in the plot window
par(mfrow= c(2,2))
# plot soil temperature throughout all observations in the study period
plot(datW$DD, datW$soil.temp, pch=19, type="b", xlab = "Day of Year",
ylab="Soil Temperature (degrees Celcius)")
# plot soil moisture throughout all observations in the study period
plot(datW$DD, datW$soil.moisture, pch=19, type="b", xlab = "Day of Year",
ylab="Soil moisture (cm3 water per cm3 soil)")
# plot air temperature throughout all observations in the study period
plot(datW$DD, datW$air.tempQ2, pch=19, type="b", xlab = "Day of Year",
ylab="Air temperature (in degree Celcius)")
# plot precipitation throughout all observations in the study period
plot(datW$DD, datW$precipitation, pch=19, type="b", xlab = "Day of Year",
ylab="Precipitation (in mm)")
## Question 8
# all the below values have been rounded off to report the findings with the correct
# number of decimal places within the sensor error
avg_airtemp<- round(mean(datW$air.tempQ2, na.rm=T),0) # average air temperature
# number of observations that went into the calculation for average air temperature
len_airtemp<- length(datW$air.tempQ2[!is.na(datW$air.tempQ2)])
avg_windspeed<- round(mean(datW$wind.speedQ2, na.rm= T),1) # average wind speed
# number of observations that went into the calculation for average wind speed
len_windspeed<- length(datW$wind.speedQ2[!is.na(datW$wind.speedQ2)])
avg_soilmoisture<- round(mean(datW$soil.moisture, na.rm=T),3) # average soil moisture
# number of observations that went into the calculation for average soil moisture
len_soilmoisture<- length(datW$soil.moisture[!is.na(datW$soil.moisture)])
avg_soiltemp<- round(mean(datW$soil.temp, na.rm=T),0) # average soil temperature
# number of observations that went into the calculation for average soil temperature
len_soiltemp<- length(datW$soil.temp[!is.na(datW$soil.temp)])
total_precipitation<- sum(datW$precipitation, na.rm = T) # total precipitation
# number of observations that went into the calculation for total precipitation
len_precipitation<- length(datW$precipitation[!is.na(datW$precipitation)])
### Practice###
#create a function. The names of the arguements for your function will be in parentheses. Everything in curly brackets will be run each time the function is run.
assert <- function(statement,err.message){
#if evaluates if a statement is true or false for a single item
if(statement == FALSE){
print(err.message)
}
}
#check how the statement works
#evaluate a false statement
assert(1 == 2, "error: unequal values")
#read in the data file
#skip the first 3 rows since there is additional column info
#specify the the NA is designated differently
datW <- read.csv("y:\\Students\\hkropp\\a03\\bewkes_weather.csv",
na.strings=c("#N/A"), skip=3, header=FALSE)
#preview data
print(datW[1,])
#get sensor info from file
# this data table will contain all relevent units
sensorInfo <-   read.csv("y:\\Students\\hkropp\\a03\\bewkes_weather.csv",
na.strings=c("#N/A"), nrows=2)
print(sensorInfo)
#get column names from sensorInfo table
# and set weather station colnames  to be the same
colnames(datW) <-   colnames(sensorInfo)
#preview data
print(datW[1,])
#use install.packages to install lubridate
# install.packages(c("lubridate"))
#it is helpful to comment this line after you run this line of code on the computer
#and the package installs. You really don't want to do this over and over again.
library(lubridate)
#convert to standardized format
#date format is m/d/y
dates <- mdy_hm(datW$timestamp, tz= "America/New_York")
#calculate day of year
datW$doy <- yday(dates)
#calculate hour in the day
datW$hour <- hour(dates) + (minute(dates)/60)
#calculate decimal day of year
datW$DD <- datW$doy + (datW$hour/24)
#quick preview of new date calcualtions
#datW[1,]
#see how many values have missing data for each sensor observation
#air temperature
length(which(is.na(datW$air.temperature)))
#wind speed
length(which(is.na(datW$wind.speed)))
#precipitation
length(which(is.na(datW$precipitation)))
#soil temperature
length(which(is.na(datW$soil.moisture)))
#soil moisture
length(which(is.na(datW$soil.temp)))
#make a plot with filled in points (using pch)
#line lines
plot(datW$DD, datW$soil.moisture, pch=19, type="b", xlab = "Day of Year",
ylab="Soil moisture (cm3 water per cm3 soil)")
#make a plot with filled in points (using pch)
#line lines
plot(datW$DD, datW$air.temperature, pch=19, type="b", xlab = "Day of Year",
ylab="Air temperature (degrees C)")
#I'm going to make a new column to work with that indicates that I am conducting QAQC
#because overwriting values should be done cautiously and can lead to confusing issues.
#It can be particularily confusing when you are just learning R.
#Here I'm using the ifelse function
#the first argument is a logical statement to be evaluated as true or false on a vector
#the second argument is the value that my air.tempQ1 column will be given if the statement
#is true. The last value is the value that will be given to air.tempQ1 if the statement is false.
#In this case it is just given the air temperature value
datW$air.tempQ1 <- ifelse(datW$air.temperature < 0, NA, datW$air.temperature)
#check the values at the extreme range of the data
#and throughout the percentiles
quantile(datW$air.tempQ1)
#look at days with really low air temperature
datW[datW$air.tempQ1 < 8,]
#look at days with really high air temperature
datW[datW$air.tempQ1 > 33,]
### Question 4 ###
fahrenheit_vals<- c(95, 82.5, 69, 94, 44, 54)
celcius_vals<- (5*(fahrenheit_vals-32))/9 # Convert temperatures in fahrenheit to celcius
### Question 5 ###
#plot precipitation and lightning strikes on the same plot
#normalize lighting strikes to match precipitation
lightscale <- (max(datW$precipitation)/max(datW$lightning.acvitivy)) * datW$lightning.acvitivy
#make the plot with precipitation and lightning activity marked
#make it empty to start and add in features
plot(datW$DD , datW$precipitation, xlab = "Day of Year", ylab = "Precipitation & lightning",
type="n")
#plot precipitation points only when there is precipitation
#make the points semi-transparent
points(datW$DD[datW$precipitation > 0], datW$precipitation[datW$precipitation > 0],
col= rgb(95/255,158/255,160/255,.5), pch=15)
#plot lightning points only when there is lightning
points(datW$DD[lightscale > 0], lightscale[lightscale > 0],
col= "tomato3", pch=19)
## Check that lengths of datW$DD and light scale vectors are equal
length(datW$DD)==length(lightscale)  # Returns True
## Using assert function from Part 1 to provide evidence on why we can use lightscale to
## subset datW, even though lightscale vector is not in the datW dataframe
# Below, the assert statement doesn't return an error
#This is evidence that we can use lightscale vector to subset datW dataframe even though
# lightscale vector is not part of the dataframe datW
assert(all(datW$DD[datW$lightning.acvitivy>0]==datW$DD[lightscale > 0]) &&
length(datW$DD[datW$lightning.acvitivy>0])==length(datW$DD[lightscale > 0]),
"error in subsetting datW using lightscale vector")
#filter out storms in wind and air temperature measurements
# filter all values with lightning that coincides with rainfall greater than 2mm or only rainfall over 5 mm.
#create a new air temp column
datW$air.tempQ2 <- ifelse(datW$precipitation  >= 2 & datW$lightning.acvitivy >0, NA,
ifelse(datW$precipitation > 5, NA, datW$air.tempQ1))
## Question 6 ##
datW$wind.speedQ2 <- ifelse(datW$precipitation  >= 2 & datW$lightning.acvitivy >0, NA,
ifelse(datW$precipitation > 5, NA, datW$wind.speed))
filter_correct<- datW$wind.speed[!(datW$precipitation  >= 2 & datW$lightning.acvitivy) && datW$precipitation <= 5]
# gives no error
# A brief note on assert condition: it checks if the data is filtered as expected
# To do so, we use filter_correct vectors which subsets datW$wind.speed according to the filtering requirements
# A special consideration made in checking for equality of vectors here is also accounting for NA values
# Fianlly, it is important to check that length of vectors is equal besides the values in them
assert(all(filter_correct == datW$wind.speedQ2 || (is.na(filter_correct) && is.na(datW$wind.speedQ2)))
&& length(filter_correct)==length(datW$wind.speedQ2),
"error in filtering the data as expected")
# Plot of windspeed with the new data
plot(datW$DD, datW$wind.speedQ2, pch=19, type= "b", xlab= "Day of Year", ylab = "Wind speed (measured in m.s)")
## Question 7, 9
# arranges all 4 plots into a 2x2 matrix in the plot window
par(mfrow= c(2,2))
# plot soil temperature throughout all observations in the study period
plot(datW$DD, datW$soil.temp, pch=19, type="b", xlab = "Day of Year",
ylab="Soil Temperature (degrees Celcius)")
# plot soil moisture throughout all observations in the study period
plot(datW$DD, datW$soil.moisture, pch=19, type="b", xlab = "Day of Year",
ylab="Soil moisture (cm3 water per cm3 soil)")
# plot air temperature throughout all observations in the study period
plot(datW$DD, datW$air.tempQ2, pch=19, type="b", xlab = "Day of Year",
ylab="Air temperature (in degree Celcius)")
# plot precipitation throughout all observations in the study period
plot(datW$DD, datW$precipitation, pch=19, type="b", xlab = "Day of Year",
ylab="Precipitation (in mm)")
## Question 8
# all the below values have been rounded off to report the findings with the correct
# number of decimal places within the sensor error
avg_airtemp<- round(mean(datW$air.tempQ2, na.rm=T),0) # average air temperature
# number of observations that went into the calculation for average air temperature
len_airtemp<- length(datW$air.tempQ2[!is.na(datW$air.tempQ2)])
avg_windspeed<- round(mean(datW$wind.speedQ2, na.rm= T),1) # average wind speed
# number of observations that went into the calculation for average wind speed
len_windspeed<- length(datW$wind.speedQ2[!is.na(datW$wind.speedQ2)])
avg_soilmoisture<- round(mean(datW$soil.moisture, na.rm=T),3) # average soil moisture
# number of observations that went into the calculation for average soil moisture
len_soilmoisture<- length(datW$soil.moisture[!is.na(datW$soil.moisture)])
avg_soiltemp<- round(mean(datW$soil.temp, na.rm=T),0) # average soil temperature
# number of observations that went into the calculation for average soil temperature
len_soiltemp<- length(datW$soil.temp[!is.na(datW$soil.temp)])
total_precipitation<- sum(datW$precipitation, na.rm = T) # total precipitation
# number of observations that went into the calculation for total precipitation
len_precipitation<- length(datW$precipitation[!is.na(datW$precipitation)])
### Practice###
#create a function. The names of the arguements for your function will be in parentheses. Everything in curly brackets will be run each time the function is run.
assert <- function(statement,err.message){
#if evaluates if a statement is true or false for a single item
if(statement == FALSE){
print(err.message)
}
}
#check how the statement works
#evaluate a false statement
assert(1 == 2, "error: unequal values")
#read in the data file
#skip the first 3 rows since there is additional column info
#specify the the NA is designated differently
datW <- read.csv("y:\\Students\\hkropp\\a03\\bewkes_weather.csv",
na.strings=c("#N/A"), skip=3, header=FALSE)
#preview data
print(datW[1,])
#get sensor info from file
# this data table will contain all relevent units
sensorInfo <-   read.csv("y:\\Students\\hkropp\\a03\\bewkes_weather.csv",
na.strings=c("#N/A"), nrows=2)
print(sensorInfo)
#get column names from sensorInfo table
# and set weather station colnames  to be the same
colnames(datW) <-   colnames(sensorInfo)
#preview data
print(datW[1,])
#use install.packages to install lubridate
# install.packages(c("lubridate"))
#it is helpful to comment this line after you run this line of code on the computer
#and the package installs. You really don't want to do this over and over again.
library(lubridate)
#convert to standardized format
#date format is m/d/y
dates <- mdy_hm(datW$timestamp, tz= "America/New_York")
#calculate day of year
datW$doy <- yday(dates)
#calculate hour in the day
datW$hour <- hour(dates) + (minute(dates)/60)
#calculate decimal day of year
datW$DD <- datW$doy + (datW$hour/24)
#quick preview of new date calcualtions
#datW[1,]
#see how many values have missing data for each sensor observation
#air temperature
length(which(is.na(datW$air.temperature)))
#wind speed
length(which(is.na(datW$wind.speed)))
#precipitation
length(which(is.na(datW$precipitation)))
#soil temperature
length(which(is.na(datW$soil.moisture)))
#soil moisture
length(which(is.na(datW$soil.temp)))
#make a plot with filled in points (using pch)
#line lines
plot(datW$DD, datW$soil.moisture, pch=19, type="b", xlab = "Day of Year",
ylab="Soil moisture (cm3 water per cm3 soil)")
#make a plot with filled in points (using pch)
#line lines
plot(datW$DD, datW$air.temperature, pch=19, type="b", xlab = "Day of Year",
ylab="Air temperature (degrees C)")
#I'm going to make a new column to work with that indicates that I am conducting QAQC
#because overwriting values should be done cautiously and can lead to confusing issues.
#It can be particularily confusing when you are just learning R.
#Here I'm using the ifelse function
#the first argument is a logical statement to be evaluated as true or false on a vector
#the second argument is the value that my air.tempQ1 column will be given if the statement
#is true. The last value is the value that will be given to air.tempQ1 if the statement is false.
#In this case it is just given the air temperature value
datW$air.tempQ1 <- ifelse(datW$air.temperature < 0, NA, datW$air.temperature)
#check the values at the extreme range of the data
#and throughout the percentiles
quantile(datW$air.tempQ1)
#look at days with really low air temperature
datW[datW$air.tempQ1 < 8,]
#look at days with really high air temperature
datW[datW$air.tempQ1 > 33,]
### Question 4 ###
fahrenheit_vals<- c(95, 82.5, 69, 94, 44, 54)
celcius_vals<- (5*(fahrenheit_vals-32))/9 # Convert temperatures in fahrenheit to celcius
### Question 5 ###
#plot precipitation and lightning strikes on the same plot
#normalize lighting strikes to match precipitation
lightscale <- (max(datW$precipitation)/max(datW$lightning.acvitivy)) * datW$lightning.acvitivy
#make the plot with precipitation and lightning activity marked
#make it empty to start and add in features
plot(datW$DD , datW$precipitation, xlab = "Day of Year", ylab = "Precipitation & lightning",
type="n")
#plot precipitation points only when there is precipitation
#make the points semi-transparent
points(datW$DD[datW$precipitation > 0], datW$precipitation[datW$precipitation > 0],
col= rgb(95/255,158/255,160/255,.5), pch=15)
#plot lightning points only when there is lightning
points(datW$DD[lightscale > 0], lightscale[lightscale > 0],
col= "tomato3", pch=19)
## Check that lengths of datW$DD and light scale vectors are equal
length(datW$DD)==length(lightscale)  # Returns True
## Using assert function from Part 1 to provide evidence on why we can use lightscale to
## subset datW, even though lightscale vector is not in the datW dataframe
# Below, the assert statement doesn't return an error
#This is evidence that we can use lightscale vector to subset datW dataframe even though
# lightscale vector is not part of the dataframe datW
assert(all(datW$DD[datW$lightning.acvitivy>0]==datW$DD[lightscale > 0]) &&
length(datW$DD[datW$lightning.acvitivy>0])==length(datW$DD[lightscale > 0]),
"error in subsetting datW using lightscale vector")
#filter out storms in wind and air temperature measurements
# filter all values with lightning that coincides with rainfall greater than 2mm or only rainfall over 5 mm.
#create a new air temp column
datW$air.tempQ2 <- ifelse(datW$precipitation  >= 2 & datW$lightning.acvitivy >0, NA,
ifelse(datW$precipitation > 5, NA, datW$air.tempQ1))
## Question 6 ##
datW$wind.speedQ2 <- ifelse(datW$precipitation  >= 2 & datW$lightning.acvitivy >0, NA,
ifelse(datW$precipitation > 5, NA, datW$wind.speed))
filter_correct<- datW$wind.speed[!(datW$precipitation  >= 2 & datW$lightning.acvitivy) && datW$precipitation <= 5]
# gives no error
# A brief note on assert condition: it checks if the data is filtered as expected
# To do so, we use filter_correct vectors which subsets datW$wind.speed according to the filtering requirements
# A special consideration made in checking for equality of vectors here is also accounting for NA values
# Fianlly, it is important to check that length of vectors is equal besides the values in them
assert(all(filter_correct == datW$wind.speedQ2 || (is.na(filter_correct) && is.na(datW$wind.speedQ2)))
&& length(filter_correct)==length(datW$wind.speedQ2),
"error in filtering the data as expected")
# Plot of windspeed with the new data
plot(datW$DD, datW$wind.speedQ2, pch=19, type= "b", xlab= "Day of Year", ylab = "Wind speed (measured in m.s)")
## Question 7, 9
# arranges all 4 plots into a 2x2 matrix in the plot window
par(mfrow= c(2,2))
# plot soil temperature throughout all observations in the study period
plot(datW$DD, datW$soil.temp, pch=19, type="b", xlab = "Day of Year",
ylab="Soil Temperature (degrees Celcius)")
# plot soil moisture throughout all observations in the study period
plot(datW$DD, datW$soil.moisture, pch=19, type="b", xlab = "Day of Year",
ylab="Soil moisture (cm3 water per cm3 soil)")
# plot air temperature throughout all observations in the study period
plot(datW$DD, datW$air.tempQ2, pch=19, type="b", xlab = "Day of Year",
ylab="Air temperature (in degree Celcius)")
# plot precipitation throughout all observations in the study period
plot(datW$DD, datW$precipitation, pch=19, type="b", xlab = "Day of Year",
ylab="Precipitation (in mm)")
## Question 8
# all the below values have been rounded off to report the findings with the correct
# number of decimal places within the sensor error
avg_airtemp<- round(mean(datW$air.tempQ2, na.rm=T),0) # average air temperature
# number of observations that went into the calculation for average air temperature
len_airtemp<- length(datW$air.tempQ2[!is.na(datW$air.tempQ2)])
avg_windspeed<- round(mean(datW$wind.speedQ2, na.rm= T),1) # average wind speed
# number of observations that went into the calculation for average wind speed
len_windspeed<- length(datW$wind.speedQ2[!is.na(datW$wind.speedQ2)])
avg_soilmoisture<- round(mean(datW$soil.moisture, na.rm=T),3) # average soil moisture
# number of observations that went into the calculation for average soil moisture
len_soilmoisture<- length(datW$soil.moisture[!is.na(datW$soil.moisture)])
avg_soiltemp<- round(mean(datW$soil.temp, na.rm=T),0) # average soil temperature
# number of observations that went into the calculation for average soil temperature
len_soiltemp<- length(datW$soil.temp[!is.na(datW$soil.temp)])
total_precipitation<- sum(datW$precipitation, na.rm = T) # total precipitation
# number of observations that went into the calculation for total precipitation
len_precipitation<- length(datW$precipitation[!is.na(datW$precipitation)])
